<?php namespace Jcloutz\Forger;

use \Faker\Factory;

class Forger
{
    /**
     * @var array
     */
    private $overrides = array();

    /**
     * @var Illuminate\Database\Eloquent\Model
     */
    private $forgeObject;

    /**
     * @param array $fields
     */

    /**
     * Sets the model to be forged.
     *
     * @param  \Illuminate\Database\Eloquent\Model $forgeableObject
     * @return Jcloutz\Forger\Forger
     */
    public function forge($forgeableObject)
    {
        $this->forgeObject = $forgeableObject;
        return $this;
    }

    /**
     * Receives a key, value array of elements to be overriden.
     *
     * @param  array  $overrides
     * @return Jcloutz\Forger\Forger
     */
    public function override($overrides = array())
    {
        $this->overrides = $overrides;
        return $this;
    }

    /**
     * Builds an array of data for model fields.
     *
     * @param array $attributes
     */
    public function execute($actionString)
    {
        // get action arguments
        $action = explode('|', $actionString);

        if ($action[0] === 'call') {
            array_shift($action);
            $classFunction = array_shift($action);
            $fakerFunction = array_shift($action);
            $fakerArgs = $action;
            $data = $this->getModelFunctionData($classFunction, $fakerFunction, $fakerArgs);

        } else {
            // get faker data only
            $fakerFunction = array_shift($action);
            $fakerArgs = $action;
            $data = $this->getFakeData($fakerFunction, $fakerArgs);
        }
        return $data;
    }

    /**
     * Executes function in the given model and returns the result.
     *
     * @param  string $classFunction Name of class to use
     * @param  string $fakerFunction Faker function to use for data creation
     * @param  array $fakerArgs     Data to pass to to the faker function
     * @return mixed
     */
    public function getModelFunctionData($classFunction, $fakerFunction = null, $fakerArgs = null)
    {
        // get faker data and pass to model function
        if ($fakerFunction !== null) {
            $fakerData = $this->getFakeData($fakerFunction, $fakerArgs);
            return call_user_func(array($this->forgeObject, $classFunction), $fakerData);
        } else {
            return call_user_func(array($this->forgeObject, $classFunction));
        }
    }


    /**
     * Retreives fake data from Faker object if it is a valid callback otherwise
     * it returns the given data type as a static value.
     *
     * @param  string $fakeType
     * @param  array  $args
     * @return mixed
     */
    public function getFakeData($fakeType, $args = array())
    {
        $faker = Factory::create();

        try {
            if (count($args) > 0) {
                $resolvedArgs = $this->resolveArguments($args);
                $value = call_user_func_array([$faker, $fakeType], $resolvedArgs);
            } else {
                $value = call_user_func([$faker, $fakeType]);
            }
        } catch (\InvalidArgumentException $e) {
            $value = $fakeType;
        }


        return $value;
    }

    /**
     * Returns field data generated by Faker.
     *
     * @return array
     */
    public function get()
    {
        $fieldData = $this->forgeObject->forger;

        foreach ($fieldData as $fieldName => $action) {
            if (array_key_exists($fieldName, $this->overrides)) {
                $this->forgeObject->$fieldName = $this->overrides[$fieldName];
            } else {
                $this->forgeObject->$fieldName = $this->execute($action);
            }
        }

        return $this->forgeObject;
    }

    /**
     * Converts given arguments array into integers if they are numeric.
     *
     * @param  array  $args
     * @return array
     */
    private function resolveArguments($args = array())
    {
        return array_map([$this, 'convertInt'], $args);
    }

    /**
     * Used by resolveArguments as an array_map function.
     *
     * @param  string $number
     * @return mixed
     */
    private function convertInt($number)
    {
        if (is_numeric($number)) {
            $value = intval($number);
        } else {
            $value = $number;
        }

        return $value;
    }
}
